{"name":"SourcePackageManager","tagline":"Tiny embeddable package manager","body":"SourcePackageManager\r\n====================\r\n\r\n.. A tiny embeddable package manager library and application.  \r\nSourcePackageManager, hereafter refered to as 'SPM', is designed to be used in the same way as RVM regarding paths, and in the same way as RubyGems in terms of managing packages, except with support for per-project dependencies, and not just system-wide and per-user packages. In fact, system-wide packages are not really handled by SPM, but instead left for your local system package manager.  \r\n  \r\nTo use this system, simply run\r\n\r\n    git clone https://github.com/mastersrp/SourcePackageManager.git ~/.spm\r\n\r\nThen follow the instructions in the Compiling section.\r\n  \r\nRequirements\r\n------------\r\n\r\nEven though SPM is rather small, it does have some dependencies.\r\n\r\n* bash\r\n* tar\r\n* bzip2\r\n* base64\r\n* gcc 4.6.3\r\n* lua 5.2.1 (for running the bootstrapping process)\r\n* git (for pulling down dependencies)\r\n* CMake (for building libgit2)\r\n\r\nCompiling\r\n---------\r\n\r\nCurrently, SPM is only supported for compilation on 32bit and 64bit architectures of GNU/Linux systems. Other systems may work out of the box, but have not been tested.  \r\nFeel free to open issues with patches if you got it working on your platform.  \r\n  \r\nFirst, you must configure the system. This step can be skipped, but for your security, it is urged that you first configure the package, and then check the configuration file for any errors.  \r\nThe included spm.sh is a very lightweight script that simply runs spm from the lua code in the paklib directory.\r\nConfiguratin is very simple:\r\n  \r\n    ./spm.sh configure\r\n\r\nThen check the configuration in build/tup.config and make sure that everything is set to values that you're okay with.  \r\nTo build a lite SPM package, simply change the BUILD\\_TYPE configuration from 'standalone' to 'lite' and the build files will do the rest.  \r\nThen, to build the system, simply run\r\n\r\n    ./spm.sh build\r\n\r\nThis will build the entire system and all dependencies.  \r\nIf anything goes wrong, feel free to check the log in the .spm directory.  \r\n\r\nInstallation\r\n------------\r\n\r\nThere's no installation step. The file 'bin/spm' is really all there is required. Put it whereever you want, or just run\r\n\r\n    source scripts/spm\r\n\r\nto prepend the bin directory to your PATH variable.  \r\nNote that this only works for the current terminal session. For permanent use, you should add\r\n\r\n    source [spm_clone_directory]/scripts/spm\r\n\r\nTo your bashrc or zshrc file.  \r\n  \r\nAlternatively, you can use [this gist](https://gist.github.com/willurd/5648907) to manage your PATH variable easily, without having to mess about a lot with rc files.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}